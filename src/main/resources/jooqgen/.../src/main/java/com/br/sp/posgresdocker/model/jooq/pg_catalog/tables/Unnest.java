/*
 * This file is generated by jOOQ.
 */
package com.br.sp.posgresdocker.model.jooq.pg_catalog.tables;


import com.br.sp.posgresdocker.model.jooq.pg_catalog.PgCatalog;
import com.br.sp.posgresdocker.model.jooq.pg_catalog.tables.records.UnnestRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Unnest extends TableImpl<UnnestRecord> {

    private static final long serialVersionUID = -1957772208;

    /**
     * The reference instance of <code>pg_catalog.unnest</code>
     */
    public static final Unnest UNNEST = new Unnest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UnnestRecord> getRecordType() {
        return UnnestRecord.class;
    }

    /**
     * The column <code>pg_catalog.unnest.lexeme</code>.
     */
    public final TableField<UnnestRecord, String> LEXEME = createField("lexeme", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.unnest.lexeme</code>.
     */
    public final TableField<UnnestRecord, String> LEXEME = createField("lexeme", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.unnest.positions</code>.
     */
    public final TableField<UnnestRecord, Short[]> POSITIONS = createField("positions", org.jooq.impl.SQLDataType.SMALLINT.getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.unnest.positions</code>.
     */
    public final TableField<UnnestRecord, Short[]> POSITIONS = createField("positions", org.jooq.impl.SQLDataType.SMALLINT.getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.unnest.weights</code>.
     */
    public final TableField<UnnestRecord, String[]> WEIGHTS = createField("weights", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.unnest.weights</code>.
     */
    public final TableField<UnnestRecord, String[]> WEIGHTS = createField("weights", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * Create a <code>pg_catalog.unnest</code> table reference
     */
    public Unnest() {
        this(DSL.name("unnest"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.unnest</code> table reference
     */
    public Unnest(String alias) {
        this(DSL.name(alias), UNNEST);
    }

    /**
     * Create an aliased <code>pg_catalog.unnest</code> table reference
     */
    public Unnest(Name alias) {
        this(alias, UNNEST);
    }

    private Unnest(Name alias, Table<UnnestRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private Unnest(Name alias, Table<UnnestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Unnest(Table<O> child, ForeignKey<O, UnnestRecord> key) {
        super(child, key, UNNEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Unnest as(String alias) {
        return new Unnest(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Unnest as(Name alias) {
        return new Unnest(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Unnest rename(String name) {
        return new Unnest(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Unnest rename(Name name) {
        return new Unnest(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Unnest call(Object tsvector) {
        return new Unnest(DSL.name(getName()), null, new Field[] { 
              DSL.val(tsvector, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\""))
        });
    }

    /**
     * Call this table-valued function
     */
    public Unnest call(Field<Object> tsvector) {
        return new Unnest(DSL.name(getName()), null, new Field[] { 
              tsvector
        });
    }
}
